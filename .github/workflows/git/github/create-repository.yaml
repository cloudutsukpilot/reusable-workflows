name: Create Repository

on:
  workflow_dispatch:
    inputs:
      repository_owner:
        description: "Name of the new repository"
        required: true
      organization_name:
        description: "Name of the organization"
        required: true
      username:
        description: "Name of the User"
        required: true
      repository_name:
        description: "Name of the repository"
        required: true
      private:
        description: "Visibility of the repository"
        required: true
        default: "false"
      repository_description:
        description: "Description of the repository"
        required: true
      domain_name:
        description: "Domain Name"
        required: true

  workflow_call:
    inputs:
      repository_owner:
        description: "Name of the new repository"
        required: true
      organization_name:
        description: "Name of the organization"
        required: true
      username:
        description: "Name of the User"
        required: true
      repository_name:
        description: "Name of the repository"
        required: true
      private:
        description: "Visibility of the repository"
        required: true
        default: "false"
      repository_description:
        description: "Description of the repository"
        required: true

jobs:
  create-repository:
    runs-on: ubuntu-latest

    steps:        
      - name: Check if repository exists
        id: check-repository
        run: |
          REPOSITORY_NAME="${{ github.event.inputs.repository_name }}"
          REPOSITORY_OWNER="${{ github.event.inputs.repository_owner}}"
          ORGANIZATION_NAME="${{ github.event.inputs.organization_name }}"

          if [ -n "$REPOSITORY_OWNER" ]; then
            echo "Checking if the repository exists in the user repository."
            REPOSITORY_URL="$REPOSITORY_OWNER/$REPOSITORY_NAME"
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              https://api.github.com/repos/$REPOSITORY_OWNER/$REPOSITORY_NAME)
          else
            echo "Checking if the repository exists in the organization."
            REPOSITORY_URL="https://api.github.com/repos/$ORGANIZATION_NAME/$REPOSITORY_NAME"
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              https://api.github.com/repos/$ORGANIZATION_NAME/$REPOSITORY_NAME)
          fi

          if [ "$STATUS" -eq 200 ]; then
            echo "Repository: $REPOSITORY_URL already exists."
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "Repository: $REPOSITORY_URL does not exist."
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Create GitHub Repository
        id: create-repository  
        if: steps.check-repository.outputs.exists == 'false'
        run: |
          REPOSITORY_NAME="${{ github.event.inputs.repository_name }}"
          REPOSITORY_OWNER="${{ github.event.inputs.repository_owner }}"
          ORGANIZATION_NAME="${{ github.event.inputs.organization_name }}"
      
          if [ -n "$REPOSITORY_OWNER" ]; then
            echo "Creating repository in the user repository."
            REPOSITORY_URL="https://api.github.com/repos/$REPOSITORY_OWNER/$REPOSITORY_NAME"
            curl -X POST -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -d "{\"name\":\"$REPOSITORY_NAME\",\"private\":${{ github.event.inputs.private }}}" \
              https://api.github.com/user/repos
          else
            echo "Creating repository in the organization."
            REPOSITORY_URL="https://api.github.com/repos/$ORGANIZATION_NAME/$REPOSITORY_NAME"
            curl -X POST -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              -d "{\"name\":\"$REPOSITORY_NAME\",\"private\":${{ github.event.inputs.private }}}" \
              https://api.github.com/orgs/$ORGANIZATION_NAME/repos
          fi

        # Step 3: Configure git
      - name: Configure git
        if: steps.check-repository.outputs.exists == 'false'
        run: | 
          git config --global user.email "${{ github.event.inputs.username }}@${{ github.event.inputs.domain_name }}"
          git config --global user.name "${{ github.event.inputs.username }}"
           git config --global init.defaultBranch main

        # Step 4: Create default README.md file
      - name: Create README.md file and push to repository
        if: steps.check-repository.outputs.exists == 'false'
        run: |
          REPOSITORY_NAME="${{ github.event.inputs.repository_name }}"
          REPOSITORY_OWNER="${{ github.event.inputs.repository_owner }}"
          ORGANIZATION_NAME="${{ github.event.inputs.organization_name }}"

          # Create a README.md file
          echo "# $REPOSITORY_NAME" > README.md
          echo "${{ github.event.inputs.repository_description }}" >> README.md

          # Initialize the repository and commit the README.md
          git init
          git checkout -b main
          git add README.md
          git commit -m "Add default README.md"

          # Add the remote URL and push the README to the new repository
          if [ -n "$REPOSITORY_OWNER" ]; then
            git remote add origin https://$ORGANIZATION_NAME:${{ secrets.GITHUB_TOKEN }}@github.com/$REPOSITORY_OWNER/$REPOSITORY_NAME.git
          else
            git remote add origin https://$ORGANIZATION_NAME:${{ secrets.GITHUB_TOKEN }}@github.com/$ORGANIZATION_NAME/$REPOSITORY_NAME.git
          fi

          git push --set-upstream origin main    
